import telebot
import src.config as config
from ..tracker.tracker import Tracker
from src.database.models.user import User
from src.database.models.task import Task
from src.core.utils import time_options, shedule 
from src.core.utils.shedule import start_scheduler
import re
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import logging  
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (INFO, DEBUG, WARNING, ERROR, CRITICAL)
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",  # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    handlers=[
        logging.FileHandler("bot.log"),  # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)  

bot = telebot.TeleBot(config.TG_BOT_TOKEN, parse_mode=None)
user_states = {}
time_pattern = re.compile(r'^([0-1]?[0-9]|2[0-3])[: ]([0-5][0-9])$')


#* START *
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    chat_id = message.chat.id
    logger.info(f"User {message.from_user.username} (chat_id: {chat_id}) started the bot.")  
    User.create(message.from_user.username, chat_id)
    bot.reply_to(message, f"""
–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}!
*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*:\n
1) –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –∑–∞—è–≤–∫–µ –≤ –∫—Å—É–∏—Ç–µ, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ –ß–ß –ú–ú\n
2) –ë–æ—Ç —Å–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –µ—â–µ —á–∞—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å, —á—Ç–æ–±—ã –Ω–µ –æ–±—ä–µ–±–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞
""", reply_markup=create_keyboard(),parse_mode='Markdown')

#* STATS *
@bot.message_handler(func=lambda message: time_pattern.match(message.text))
def handle_time(message):
    time = message.text.replace(' ', ':')
    logger.info(f"Received time input: {time} from user {message.from_user.username} (chat_id: {message.chat.id})")  
    actual_time = datetime.now()
    cur_time = Task.get_current_time_by_date(chat_id=message.chat.id, target_date=actual_time)
    cur_time = time_options.timedelta_to_hhmm(cur_time)
    user = User.get(message.chat.id)
    daily_target = f"{user.daily_target_hour:02}:{user.daily_target_min:02}"
    tracker = Tracker(current_time=cur_time, daily_target=daily_target)
    cur_time = tracker.uppload_work_time(time)
    Task.create(message.chat.id, int(time.split(':')[0]), int(time.split(':')[1]))
    logger.info(f"Task created for user {message.from_user.username} (chat_id: {message.chat.id}) with time {time}.")  
    bot.reply_to(message, f"–û—Å—Ç–∞–ª–æ—Å—å {cur_time} —á–∞—Å–æ–≤", reply_markup=create_keyboard())

@bot.message_handler(func=lambda message: message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è üìä")
def send_today_stats(message):
    logger.info(f"User {message.from_user.username} (chat_id: {message.chat.id}) requested today's statistics.")  
    user = User.get(message.chat.id)
    user_target_timedelta = timedelta(hours=user.daily_target_hour, minutes=user.daily_target_min)
    response = ""
    response += f"*–¶–µ–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è*: {user.daily_target_hour:02}:{user.daily_target_min:02}\n"
    tasks = Task.today_user_stats(message.chat.id)
    total_time = timedelta(seconds=0)
    for task in tasks:
        response += f"{task.hour:02}:{task.min:02} –≤ {task.datetime.hour:02}:{task.datetime.minute:02}\n"
        total_time += timedelta(hours=task.hour, minutes=task.min)
    response += f"*–û–±—â–µ–µ –≤—Ä–µ–º—è*: {time_options.timedelta_to_hhmm(total_time)}"
    response += f"\n*–û—Å—Ç–∞–ª–æ—Å—å*: {time_options.timedelta_to_hhmm(user_target_timedelta - total_time)}"
    bot.reply_to(message, response, parse_mode='Markdown', reply_markup=create_keyboard())

#* SETTINGS *
@bot.message_handler(func=lambda message: message.text == "–ù–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∏ ‚öôÔ∏è")
def set_settings(message):
    logger.info(f"User {message.from_user.username} (chat_id: {message.chat.id}) requested settings.")
    user = User.get(message.chat.id)
    response = f"""
–¢–µ–∫—É—â–∞—è –¥–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å: {user.daily_target_hour:02}:{user.daily_target_min:02}
–¢–µ–∫—É—â–∞—è –º–µ—Å—è—á–Ω–∞—è —Ü–µ–ª—å: {user.monthly_target_hour:02} —á–∞—Å–æ–≤
–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã? 
"""
    bot.reply_to(message, response, reply_markup=create_settings_keyboard())

@bot.callback_query_handler(func=lambda call: True) # –õ–æ–≤–∏–º callback
def callback_query(call):
    if call.data == "yes":
        user_states[call.message.chat.id] = "setting"
        bot.answer_callback_query(call.id, "–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
        bot.send_message(call.message.chat.id, """–ù–∞–ø–∏—à–∏—Ç–µ –¥–Ω–µ–≤–Ω—É—é —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –∏–ª–∏ –ß–ß MM,
–ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ–±–µ–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é —Ü–µ–ª—å –≤ —á–∞—Å–∞—Ö.
*–ù–∞–ø—Ä–∏–º–µ—Ä*:
08:00 160 ‚úÖ
07 00 140 ‚úÖ
07:00:140 ‚úÖ 
""", parse_mode='Markdown')
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    elif call.data == "no":
        bot.answer_callback_query(call.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.send_message(call.message.chat.id, "–ù–∞ –Ω–µ—Ç –∏ —Å—É–¥–∞ –Ω–µ—Ç)")
    else:
        bot.answer_callback_query(call.id, "ü§°")


@bot.message_handler(func=lambda message: user_states[message.chat.id] == "setting")
def set_settings(message):
    user = User.get(message.chat.id)
    text = message.text.replace(' ', ':')
    text = text.split(':')
    if user:
        user = User.update(message.chat.id, daily_target_hour=int(text[0]), daily_target_min=int(text[1]), monthly_target_hour=int(text[2]))
        bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


#* Functions *
def send_message_to_chat(chat_id: int, text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.
    :param chat_id: ID —á–∞—Ç–∞
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        bot.send_message(chat_id, text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}.")
    except Exception as e:
        logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot.message_handler(func=lambda m: True)
def echo_all(message):
    user = User.get(message.chat.id)
    if user:
        name = user.name
        logger.info(f"Echo response sent to user {name} (chat_id: {message.chat.id}).")  
        bot.reply_to(message, str(f"–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ ü§°"))
    else:
        logger.warning(f"User not found for chat_id: {message.chat.id}.") 
        bot.reply_to(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

#* Buttons *

def create_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π.
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    today_stat_button = KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è üìä")
    settings_button = KeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∏ ‚öôÔ∏è") #üõ†
    #button2 = KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤–µ—Å—å –º–µ—Å—è—Ü üìäüìäüìä")  # –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
    keyboard.add(today_stat_button)
    keyboard.add(settings_button)
    #keyboard.add(button2)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return keyboard
def create_settings_keyboard():
    keyboard = InlineKeyboardMarkup()
    yes_button = InlineKeyboardButton("–î–∞ ‚úÖ", callback_data="yes")
    no_button = InlineKeyboardButton("–ù–µ—Ç ‚ùå", callback_data="no")
    keyboard.add(yes_button, no_button)
    return keyboard

try:
    logger.info("Starting bot...")
    start_scheduler()
    bot.infinity_polling()
except Exception as e:
    logger.error(f"An error occurred: {e}", exc_info=True)  